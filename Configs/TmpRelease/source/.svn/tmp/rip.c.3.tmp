#include "rip.h"
#include "rip_route_table.h"

extern struct ipv4_handler ipv4_handler;

rip_route_table_t *rip_table;


typedef struct rip_datagram
{
  unsigned char command;
  unsigned char version;
  uint16_t zero;
  struct rip_entry rip_entry[MAX_ENTRIES];
} rip_datagram_t;


int rip_recv(udp_port_t src, udp_port_t dst, ipv4_addr_t from, 
			 unsigned char *buffer, int *opcode, long int timeout)
{

	struct rip_datagram *rip_dgm;
	//udp_port_t port_src;
	int bytes_read = 0;
  
// 	udp_port_t rip_port;
// 	udp_bin_port(rip_port, RIP_PORT);
  
	bytes_read = udp_recv(src, from, dst, buffer, timeout);
  
	if (bytes_read < 0)
	{
		fprintf(stderr, "rip_recv(): ERROR en udp_recv()\n");
		return -1;
	}
	else if (!bytes_read)
	{
		return 0;
	}
	else
	{
		if (ipv4_route_lookup((ipv4_route_t *)&ipv4_handler, from) == -1)
			return 0;
		
		rip_dgm = (struct rip_datagram *)buffer;
		
		if (rip_dgm->command == RIP_RESPONSE)
		{
			udp_port_t aux;
			udp_bin_port(aux, 520);
			if (memcmp(src, aux, sizeof(udp_port_t)) != 0) return 0;
		}
		
		int num_entries = sizeof(rip_dgm->rip_entry)/sizeof(rip_route_t);
		
		if (num_entries <= 0) return 0;
		
		rip_route_t aux[num_entries];
		rip_route_t routes[num_entries];
		
		memcpy(routes, rip_dgm->rip_entry, sizeof(rip_dgm->rip_entry));	
		
		int i, valid_routes = 0;
		for (i = 0; i < num_entries; i++)
		{
			if (is_valid_route(routes[i].ip_addr, routes[i].mask, routes[i].metric))
			{
				memcpy(&aux[valid_routes], &routes[i], sizeof(rip_route_t));
				valid_routes++;
			}
		}
		
		int routes_size = sizeof(rip_route_t)*valid_routes;
		
<<<<<<< .mine
		memcpy(buffer, aux, routes_size);
		
		return routes_size;

  }
=======
		return bytes_read;

  }*/
>>>>>>> .r136
}


int rip_send(ipv4_addr_t dst,udp_port_t port_dst, unsigned char* table, int len, int op_code) 
{
	int bytes_send = 0;
	
	//unsigned char rip_datagram[RIP_HEADER_LEN];
	
	int total_len = RIP_HEADER_LEN + len;
	unsigned char rip_datagram[total_len];
	
	udp_port_t rip_port;//Desde donde enviamos
	//udp_port_t rip_port1;//A donde envamos
	udp_bin_port(rip_port, RIP_PORT);
	//udp_bin_port(rip_port1, port_dts);


	if(op_code == RIP_REQUEST)
	{
	
	  ((struct rip_datagram *)rip_datagram)->command = RIP_REQUEST;
	  ((struct rip_datagram *)rip_datagram)->version = VERSION;
	  ((struct rip_datagram *)rip_datagram)->zero = 0;
	  memcpy(((struct rip_datagram *)rip_datagram)->rip_entry, table, len);
		
	//memcpy(((struct rip_datagram *)rip_datagram)->rip_datagram, (struct rip_datagram *)rip_datagram, total_len);
	if ((bytes_send = udp_send(port_dst, rip_port, dst, rip_datagram, total_len)) < 0)
	{
		fprintf(stderr, "send_updates(): ERROR en udp_send()\n");
        	return -1; 
	}
	else
	{
		return bytes_send;
	}	
		
		
	}else if(op_code == RIP_RESPONSE)
	{
	  ((struct rip_datagram *)rip_datagram)->command = RIP_RESPONSE;
	  ((struct rip_datagram *)rip_datagram)->version = VERSION;
	  ((struct rip_datagram *)rip_datagram)->zero = 0;
	  memcpy(((struct rip_datagram *)rip_datagram)->rip_entry, table, len);
	  if ((bytes_send = udp_send(rip_port, port_dst, dst, rip_datagram, total_len)) < 0)
	{
		fprintf(stderr, "send_updates(): ERROR en udp_send()\n");
        	return -1; 
	}
		
	}
	return bytes_send;

}

int rip_open()
{
    if (udp_open() == -1)
    {
        fprintf(stderr,"rip_open(): ERROR in udp_open()\n");
        exit(-1);
    }
    rip_table = NULL;
    return 0;	
}

int rip_close()
{
    if (udp_close() == -1)
    {
        fprintf(stderr,"rip_close(): ERROR in udp_close()\n");
        exit(-1);
    }
     rip_route_table_free(rip_table);
    return 0;
}

