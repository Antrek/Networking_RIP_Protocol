#include "rip.h"
#include "rip_route_table.h"



rip_route_table_t *rip_table;


typedef struct rip_datagram
{
  unsigned char command;
  unsigned char version;
  uint16_t zero;
  struct rip_entry rip_entry[MAX_ENTRIES];
} rip_datagram_t;


int rip_recv(ipv4_addr_t from, unsigned char *buffer, long int timeout)
{
	struct rip_datagram *rip_dgm;
	udp_port_t port_src;
	int bytes_read = 0;
  
	udp_port_t rip_port;
	udp_bin_port(rip_port, RIP_PORT);
  
	bytes_read = udp_recv(port_src, from, rip_port, buffer, get_min_time(rip_table));
  
	if (bytes_read < 0)
	{
		fprintf(stderr, "rip_recv(): ERROR en udp_recv()\n");
		return -1;
	}
	else if (!bytes_read)
	{
	  return 0;
	}
	else
	{
		rip_dgm = (struct rip_datagram *)buffer;
		if (rip_dgm->command == RIP_REQUEST)
		{
			// Envia la tabla completa (FUNCION A PARTE???)
			if (sizeof(rip_dgm->rip_entry) == 20 && rip_dgm->rip_entry->metric == 16)
			{
				int table_size = rip_route_table_size(rip_table);
				int num_dgm = table_size <= 25 ? 1 : table_size/25 + 1;
				rip_route_table_t *send_table = rip_table;
				
				unsigned char *send_routes = NULL;
				int i = 1;
				while (i <= num_dgm)
				{
					int j = 0;
					int num_routes;
					
					if (i == num_dgm)
					{
						num_routes = table_size - (num_dgm - 1)*25;
					}
					else
					{
						num_routes = 25;
					}
					
					rip_route_t routes[num_routes];
					
					while (j < num_routes)
					{
						memcpy(&routes[j], &(send_table->data->route), sizeof(struct rip_entry));
						send_table = send_table->next;
						j++;
					}
						
					send_routes = (unsigned char *)routes;
					
					int bytes_sent = rip_send(from, send_routes, num_routes, RIP_RESPONSE);
					if (bytes_sent < 0)
					{
						fprintf(stderr, "rip_recv(): ERROR en rip_send()\n");
						return -1;
					}
					
					i++;
				}
			}else
			{
				//se le envia lo que pide
			}

		}
		else if (rip_dgm->command == RIP_RESPONSE)
		{
			int n_entries = (sizeof(rip_dgm) - RIP_HEADER_LEN)/sizeof(struct rip_entry);
			int f;
		
			for(f = 0; f < n_entries; f++)
			{
				if ( rip_dgm->rip_entry[f].metric < 0 || rip_dgm->rip_entry[f].metric > 16)
					continue;
				
				/*ipv4_addr_t subnet;
				ipv4_addr_t mask;
				
				memcpy(subnet, rip_dgm->rip_entry[f].ip_addr, IPv4_ADDR_SIZE);
				memcpy(subnet, rip_dgm->rip_entry[f].mask, IPv4_ADDR_SIZE);		
				
				rip_route_table_find(rip_table, subnet, mask);*/
				
				// Actualiza o aï¿½ade
				rip_table = rip_route_update(rip_table, &(rip_dgm->rip_entry[f]));
			}
			rip_route_table_output(stdout,rip_table);
		}
		return bytes_read;
  }
}


int rip_send(ipv4_addr_t dst,int port_src,int port_dst, unsigned char* table, int len, int op_code) 
{
	int bytes_send = 0;
	
	//unsigned char rip_datagram[RIP_HEADER_LEN];
	
	int total_len = RIP_HEADER_LEN + len;
	unsigned char rip_datagram[total_len];
	
	udp_port_t rip_port;
	udp_port_t rip_port1;
	udp_bin_port(rip_port, port_dst);
	udp_bin_port(rip_port1, port_src);


	if(op_code == RIP_REQUEST)
	{
	
	  ((struct rip_datagram *)rip_datagram)->command = RIP_REQUEST;
	  ((struct rip_datagram *)rip_datagram)->version = VERSION;
	  ((struct rip_datagram *)rip_datagram)->zero = 0;
	  memcpy(((struct rip_datagram *)rip_datagram)->rip_entry, table, len);
		
		//memcpy(((struct rip_datagram *)rip_datagram)->rip_datagram, (struct rip_datagram *)rip_datagram, total_len);
		
		
		
	}else if(op_code == RIP_RESPONSE)
	{
	  ((struct rip_datagram *)rip_datagram)->command = RIP_RESPONSE;
	  ((struct rip_datagram *)rip_datagram)->version = VERSION;
	  ((struct rip_datagram *)rip_datagram)->zero = 0;
	  memcpy(((struct rip_datagram *)rip_datagram)->rip_entry, table, len);
	}
		
	
	if ((bytes_send = udp_send(rip_port1, rip_port, dst, rip_datagram, total_len)) < 0)

	{
		fprintf(stderr, "send_updates(): ERROR en udp_send()\n");
        	return -1; 
	}
	else
	{
		return bytes_send;
	}
}

int rip_open()
{
    if (udp_open() == -1)
    {
        fprintf(stderr,"rip_open(): ERROR in udp_open()\n");
        exit(-1);
    }
    rip_table = NULL;
    return 0;	
}

int rip_close()
{
    if (udp_close() == -1)
    {
        fprintf(stderr,"rip_close(): ERROR in udp_close()\n");
        exit(-1);
    }
     rip_route_table_free(rip_table);
    return 0;
}

